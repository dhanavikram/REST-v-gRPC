# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import grpc_pb2 as grpc__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class addStub(object):
    """GRPC service to add two numbers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addTwoNumbers = channel.unary_unary(
                '/add/addTwoNumbers',
                request_serializer=grpc__pb2.addMsg.SerializeToString,
                response_deserializer=grpc__pb2.addReply.FromString,
                _registered_method=True)


class addServicer(object):
    """GRPC service to add two numbers
    """

    def addTwoNumbers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_addServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addTwoNumbers': grpc.unary_unary_rpc_method_handler(
                    servicer.addTwoNumbers,
                    request_deserializer=grpc__pb2.addMsg.FromString,
                    response_serializer=grpc__pb2.addReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'add', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('add', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class add(object):
    """GRPC service to add two numbers
    """

    @staticmethod
    def addTwoNumbers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/add/addTwoNumbers',
            grpc__pb2.addMsg.SerializeToString,
            grpc__pb2.addReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class rawImageStub(object):
    """GRPC service to get a raw image and return the dimensions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.computeImage = channel.unary_unary(
                '/rawImage/computeImage',
                request_serializer=grpc__pb2.rawImageMsg.SerializeToString,
                response_deserializer=grpc__pb2.imageReply.FromString,
                _registered_method=True)


class rawImageServicer(object):
    """GRPC service to get a raw image and return the dimensions
    """

    def computeImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rawImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'computeImage': grpc.unary_unary_rpc_method_handler(
                    servicer.computeImage,
                    request_deserializer=grpc__pb2.rawImageMsg.FromString,
                    response_serializer=grpc__pb2.imageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rawImage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rawImage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class rawImage(object):
    """GRPC service to get a raw image and return the dimensions
    """

    @staticmethod
    def computeImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rawImage/computeImage',
            grpc__pb2.rawImageMsg.SerializeToString,
            grpc__pb2.imageReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class dotProductStub(object):
    """GRPC service to compute dot product of two arrays
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.computeDotProduct = channel.unary_unary(
                '/dotProduct/computeDotProduct',
                request_serializer=grpc__pb2.dotProductMsg.SerializeToString,
                response_deserializer=grpc__pb2.dotProductReply.FromString,
                _registered_method=True)


class dotProductServicer(object):
    """GRPC service to compute dot product of two arrays
    """

    def computeDotProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_dotProductServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'computeDotProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.computeDotProduct,
                    request_deserializer=grpc__pb2.dotProductMsg.FromString,
                    response_serializer=grpc__pb2.dotProductReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dotProduct', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dotProduct', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class dotProduct(object):
    """GRPC service to compute dot product of two arrays
    """

    @staticmethod
    def computeDotProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dotProduct/computeDotProduct',
            grpc__pb2.dotProductMsg.SerializeToString,
            grpc__pb2.dotProductReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class jsonImageStub(object):
    """GRPC service to get a raw image and return the dimensions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.computeJsonImage = channel.unary_unary(
                '/jsonImage/computeJsonImage',
                request_serializer=grpc__pb2.jsonImageMsg.SerializeToString,
                response_deserializer=grpc__pb2.imageReply.FromString,
                _registered_method=True)


class jsonImageServicer(object):
    """GRPC service to get a raw image and return the dimensions
    """

    def computeJsonImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_jsonImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'computeJsonImage': grpc.unary_unary_rpc_method_handler(
                    servicer.computeJsonImage,
                    request_deserializer=grpc__pb2.jsonImageMsg.FromString,
                    response_serializer=grpc__pb2.imageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jsonImage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jsonImage', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class jsonImage(object):
    """GRPC service to get a raw image and return the dimensions
    """

    @staticmethod
    def computeJsonImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/jsonImage/computeJsonImage',
            grpc__pb2.jsonImageMsg.SerializeToString,
            grpc__pb2.imageReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
